version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:2.13-2.8.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  # PostgreSQL for each service
  passenger-db:
    image: postgres:15
    environment:
      POSTGRES_DB: passenger
      POSTGRES_USER: passenger
      POSTGRES_PASSWORD: passengerpw
    ports:
      - "5433:5432"
    volumes:
      - passenger-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U passenger -d passenger"]
      interval: 10s
      timeout: 5s
      retries: 5

  transport-db:
    image: postgres:15
    environment:
      POSTGRES_DB: transport
      POSTGRES_USER: transport
      POSTGRES_PASSWORD: transportpw
    ports:
      - "5434:5432"
    volumes:
      - transport-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transport -d transport"]
      interval: 10s
      timeout: 5s
      retries: 5

  ticketing-db:
    image: postgres:15
    environment:
      POSTGRES_DB: ticketing
      POSTGRES_USER: ticketing
      POSTGRES_PASSWORD: ticketingpw
    ports:
      - "5435:5432"
    volumes:
      - ticketing-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketing -d ticketing"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-db:
    image: postgres:15
    environment:
      POSTGRES_DB: payment
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: paymentpw
    ports:
      - "5436:5432"
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment -d payment"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-db:
    image: postgres:15
    environment:
      POSTGRES_DB: notification
      POSTGRES_USER: notification
      POSTGRES_PASSWORD: notificationpw
    ports:
      - "5437:5432"
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification -d notification"]
      interval: 10s
      timeout: 5s
      retries: 5

  admin-db:
    image: postgres:15
    environment:
      POSTGRES_DB: admin
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpw
    ports:
      - "5438:5432"
    volumes:
      - admin-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  passenger-service:
    build: ./passenger-service
    ports:
      - "8081:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://passenger-db:5432/passenger
      DATABASE_USER: passenger
      DATABASE_PASSWORD: passengerpw
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      passenger-db:
        condition: service_healthy
    restart: unless-stopped

  transport-service:
    build: ./transport-service
    ports:
      - "8082:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://transport-db:5432/transport
      DATABASE_USER: transport
      DATABASE_PASSWORD: transportpw
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      transport-db:
        condition: service_healthy
    restart: unless-stopped

  ticketing-service:
    build: ./ticketing-service
    ports:
      - "8083:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://ticketing-db:5432/ticketing
      DATABASE_USER: ticketing
      DATABASE_PASSWORD: ticketingpw
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      ticketing-db:
        condition: service_healthy
    restart: unless-stopped

  payment-service:
    build: ./payment-service
    ports:
      - "8084:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://payment-db:5432/payment
      DATABASE_USER: payment
      DATABASE_PASSWORD: paymentpw
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      payment-db:
        condition: service_healthy
    restart: unless-stopped

  notification-service:
    build: ./notification-service
    ports:
      - "8085:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://notification-db:5432/notification
      DATABASE_USER: notification
      DATABASE_PASSWORD: notificationpw
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      notification-db:
        condition: service_healthy
    restart: unless-stopped

  admin-service:
    build: ./admin.service
    ports:
      - "8086:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://admin-db:5432/admin
      DATABASE_USER: admin
      DATABASE_PASSWORD: adminpw
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      admin-db:
        condition: service_healthy
    restart: unless-stopped

  kafka-topics:
    image: wurstmeister/kafka:2.13-2.8.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        kafka-topics.sh --create --if-not-exists --topic passenger-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic transport-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic ticketing-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic payment-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic notification-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --create --if-not-exists --topic admin-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --list --bootstrap-server kafka:9092
      "

volumes:
  passenger-db-data:
  transport-db-data:
  ticketing-db-data:
  payment-db-data:
  notification-db-data:
  admin-db-data: